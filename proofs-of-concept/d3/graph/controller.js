// Generated by CoffeeScript 1.4.0
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  define(["graph"], function(graph) {
    var Controller;
    return Controller = (function() {
      var HEIGHT, WIDTH;

      WIDTH = 960;

      HEIGHT = 500;

      function Controller() {
        this.mouseup = __bind(this.mouseup, this);

        this.mousemove = __bind(this.mousemove, this);

        this.mousedown = __bind(this.mousedown, this);

        var _this = this;
        this.nodes = [
          {
            id: 0,
            reflexive: false
          }, {
            id: 1,
            reflexive: true
          }, {
            id: 2,
            reflexive: false
          }
        ];
        this.links = [
          {
            source: this.nodes[0],
            target: this.nodes[1],
            left: false,
            right: true
          }, {
            source: this.nodes[1],
            target: this.nodes[2],
            left: false,
            right: true
          }
        ];
        this.lastNodeId = 2;
        this.svg = d3.select("body").append("svg").attr("WIDTH", WIDTH).attr("HEIGHT", HEIGHT).attr("pointer-events", "all");
        this.svg.append('svg:g');
        this.hitbox = this.svg.append('svg:rect').attr('width', WIDTH).attr('height', HEIGHT).attr('fill', 'white').call(d3.behavior.zoom().on("zoom", (function() {
          return _this.redraw();
        })));
        this.zoomGroup = this.svg.append('svg:g');
        this.hitbox.on("mousedown", this.mousedown).on("mousemove", this.mousemove).on("mouseup", this.mouseup);
        this.graph = new graph(this.zoomGroup, WIDTH, HEIGHT);
        this.graph.setNodes(this.nodes);
        this.graph.setLinks(this.links);
        this.graph.init();
        this.drag_line = this.zoomGroup.append("svg:path").attr("class", "link dragline hidden").attr("d", "M0,0L0,0");
      }

      Controller.prototype.mousedown = function() {
        var mousedown_link, mousedown_node, node, point, __this, _ref;
        _ref = this.graph, mousedown_node = _ref.mousedown_node, mousedown_link = _ref.mousedown_link;
        this.graph.svg.classed("active", true);
        if (d3.event.ctrlKey || mousedown_node || mousedown_link) {
          return;
        }
        __this = this.svg[0][0];
        point = d3.mouse(__this);
        node = {
          id: ++this.lastNodeId,
          reflexive: false
        };
        node.x = point[0];
        node.y = point[1];
        node.fixed = true;
        this.nodes.push(node);
        return this.graph.restart();
      };

      Controller.prototype.mousemove = function() {
        var mousedown_node, __this;
        mousedown_node = this.graph.mousedown_node;
        if (!mousedown_node) {
          this.drag_line.classed("hidden", true);
          return;
        }
        __this = this.svg[0][0];
        this.drag_line;
        return this.drag_line.classed("hidden", false).style('marker-end', 'url(#end-arrow)').attr("d", "M" + mousedown_node.x + "," + mousedown_node.y + "L" + (d3.mouse(__this)[0]) + "," + (d3.mouse(__this)[1]));
      };

      Controller.prototype.mouseup = function() {
        var mousedown_node;
        mousedown_node = this.graph.mousedown_node;
        if (mousedown_node) {
          this.drag_line.classed("hidden", true).style("marker-end", "");
        }
        this.graph.svg.classed("active", false);
        return this.graph.resetMouseVars();
      };

      Controller.prototype.redraw = function() {
        return this.zoomGroup.attr("transform", "translate(" + d3.event.translate + ") scale(" + d3.event.scale + ")");
      };

      return Controller;

    })();
  });

}).call(this);
