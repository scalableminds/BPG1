// Generated by CoffeeScript 1.4.0
(function() {

  define(function() {
    var Graph;
    return Graph = (function() {
      var colors;

      colors = d3.scale.category10();

      function Graph(svg_container, width, height) {
        this.width = width;
        this.height = height;
        this.svg = svg_container.append("svg:g");
      }

      Graph.prototype.setNodes = function(nodes) {
        this.nodes = nodes;
      };

      Graph.prototype.setLinks = function(links) {
        this.links = links;
      };

      Graph.prototype.init = function() {
        var _this = this;
        this.force = d3.layout.force().nodes(this.nodes).links(this.links).size([this.width, this.height]).linkDistance(150).charge(-500).on("tick", (function() {
          return _this.tick();
        }));
        this.initArrowMarkers();
        this.path = this.svg.append("svg:g").selectAll("path");
        this.circle = this.svg.append("svg:g").selectAll("g");
        this.selected_node = null;
        this.selected_link = null;
        this.mousedown_link = null;
        this.mousedown_node = null;
        this.mouseup_node = null;
        return this.restart();
      };

      Graph.prototype.initArrowMarkers = function() {
        this.svg.append("svg:defs").append("svg:marker").attr("id", "end-arrow").attr("viewBox", "0 -5 10 10").attr("refX", 6).attr("markerWidth", 3).attr("markerHeight", 3).attr("orient", "auto").append("svg:path").attr("d", "M0,-5L10,0L0,5").attr("fill", "#000");
        return this.svg.append("svg:defs").append("svg:marker").attr("id", "start-arrow").attr("viewBox", "0 -5 10 10").attr("refX", 4).attr("markerWidth", 3).attr("markerHeight", 3).attr("orient", "auto").append("svg:path").attr("d", "M10,-5L0,0L10,5").attr("fill", "#000");
      };

      Graph.prototype.resetMouseVars = function() {
        this.mousedown_node = null;
        this.mouseup_node = null;
        return this.mousedown_link = null;
      };

      Graph.prototype.tick = function() {
        this.path.attr("d", function(d) {
          var deltaX, deltaY, dist, normX, normY, sourcePadding, sourceX, sourceY, targetPadding, targetX, targetY;
          deltaX = d.target.x - d.source.x;
          deltaY = d.target.y - d.source.y;
          dist = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
          if (dist === 0) {
            return;
          }
          normX = deltaX / dist;
          normY = deltaY / dist;
          sourcePadding = d.left ? 17 : 12;
          targetPadding = d.right ? 17 : 12;
          sourceX = d.source.x + (sourcePadding * normX);
          sourceY = d.source.y + (sourcePadding * normY);
          targetX = d.target.x - (targetPadding * normX);
          targetY = d.target.y - (targetPadding * normY);
          return "M" + sourceX + "," + sourceY + "L" + targetX + "," + targetY;
        });
        return this.circle.attr("transform", function(d) {
          return "translate(" + d.x + "," + d.y + ")";
        });
      };

      Graph.prototype.restart = function() {
        var g, i, mousedown_link, mousedown_node, mouseup_node, selected_link, selected_node, _i,
          _this = this;
        mousedown_node = this.mousedown_node, mousedown_link = this.mousedown_link, mouseup_node = this.mouseup_node, selected_node = this.selected_node, selected_link = this.selected_link;
        this.path = this.path.data(this.links);
        this.path.classed("selected", function(d) {
          return d === selected_link;
        }).style("marker-start", function(d) {
          if (d.left) {
            return "url(#start-arrow)";
          } else {
            return "";
          }
        }).style("marker-end", function(d) {
          if (d.right) {
            return "url(#end-arrow)";
          } else {
            return "";
          }
        });
        this.path.enter().append("svg:path").attr("class", "link").classed("selected", function(d) {
          return d === selected_link;
        }).style("marker-start", function(d) {
          if (d.left) {
            return "url(#start-arrow)";
          } else {
            return "";
          }
        }).style("marker-end", function(d) {
          if (d.right) {
            return "url(#end-arrow)";
          } else {
            return "";
          }
        }).on("mousedown", function(d) {
          if (d3.event.ctrlKey) {
            return;
          }
          mousedown_link = d;
          if (mousedown_link === _this.selected_link) {
            _this.selected_link = null;
          } else {
            _this.selected_link = mousedown_link;
          }
          _this.selected_node = null;
          return _this.restart();
        });
        this.path.exit().remove();
        this.circle = this.circle.data(this.nodes, function(d) {
          return d.id;
        });
        this.circle.selectAll("circle").style("fill", function(d) {
          if (d === selected_node) {
            return d3.rgb(colors(d.id)).brighter().toString();
          } else {
            return colors(d.id);
          }
        }).classed("reflexive", function(d) {
          return d.reflexive;
        });
        g = this.circle.enter().append("svg:g");
        g.append("svg:circle").attr("class", "node").attr("r", 12).style("fill", function(d) {
          if (d === selected_node) {
            return d3.rgb(colors(d.id)).brighter().toString();
          } else {
            return colors(d.id);
          }
        }).style("stroke", function(d) {
          return d3.rgb(colors(d.id)).darker().toString();
        }).classed("reflexive", function(d) {
          return d.reflexive;
        }).on("mouseover", function(d) {
          if (!mousedown_node || d === mousedown_node) {
            return;
          }
          return d3.select(this).attr("transform", "scale(1.1)");
        }).on("mouseout", function(d) {
          if (!mousedown_node || d === mousedown_node) {
            return;
          }
          return d3.select(this).attr("transform", "");
        }).on("mousedown", function(d) {
          if (d3.event.ctrlKey) {
            return;
          }
          mousedown_node = d;
          if (mousedown_node === selected_node) {
            _this.selected_node = null;
          } else {
            _this.selected_node = mousedown_node;
          }
          _this.selected_link = null;
          _this.mousedown_node = mousedown_node;
          return _this.restart();
        }).on("mouseup", function(d) {
          var direction, link, source, target, __this;
          mousedown_node = _this.mousedown_node, mouseup_node = _this.mouseup_node;
          if (!mousedown_node) {
            return;
          }
          mouseup_node = d;
          if (mouseup_node === mousedown_node) {
            _this.resetMouseVars();
            return;
          }
          __this = _this.svg[0][0];
          d3.select(__this).attr("transform", "");
          if (mousedown_node.id < mouseup_node.id) {
            source = mousedown_node;
            target = mouseup_node;
            direction = "right";
          } else {
            source = mouseup_node;
            target = mousedown_node;
            direction = "left";
          }
          _this.mousedown_node = null;
          link = _this.links.filter(function(l) {
            return l.source === source && l.target === target;
          })[0];
          if (link) {
            link[direction] = true;
          } else {
            link = {
              source: source,
              target: target,
              left: false,
              right: false
            };
            link[direction] = true;
            _this.links.push(link);
          }
          _this.selected_link = link;
          _this.selected_node = null;
          return _this.restart();
        });
        g.append("svg:text").attr("x", 0).attr("y", 4).attr("class", "id").text(function(d) {
          return d.id;
        });
        this.circle.exit().remove();
        this.force.start();
        for (i = _i = 0; _i <= 500; i = ++_i) {
          this.force.tick();
        }
        return this.force.stop();
      };

      return Graph;

    })();
  });

}).call(this);
